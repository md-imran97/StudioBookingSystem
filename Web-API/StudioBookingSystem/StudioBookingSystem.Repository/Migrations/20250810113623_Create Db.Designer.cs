// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudioBookingSystem.Repository.Database;

#nullable disable

namespace StudioBookingSystem.Repository.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250810113623_Create Db")]
    partial class CreateDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Amenity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("Amenities");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Availability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("Close")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("Open")
                        .HasColumnType("time");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId")
                        .IsUnique();

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId")
                        .IsUnique();

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CoordinatesId")
                        .HasColumnType("int");

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudioId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Studio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("PricePerHour")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.StudioImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StudioId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("StudioId");

                    b.ToTable("StudioImages");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.TimeSlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Amenity", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithMany("Amenities")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Availability", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithOne("Availability")
                        .HasForeignKey("StudioBookingSystem.Common.EntityModel.Availability", "StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Booking", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithMany("Bookings")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Contact", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithOne("Contact")
                        .HasForeignKey("StudioBookingSystem.Common.EntityModel.Contact", "StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Coordinates", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Location", "Location")
                        .WithOne("Coordinates")
                        .HasForeignKey("StudioBookingSystem.Common.EntityModel.Coordinates", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Location", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithOne("Location")
                        .HasForeignKey("StudioBookingSystem.Common.EntityModel.Location", "StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.StudioImage", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Studio", "Studio")
                        .WithMany("Images")
                        .HasForeignKey("StudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studio");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.TimeSlot", b =>
                {
                    b.HasOne("StudioBookingSystem.Common.EntityModel.Booking", "Booking")
                        .WithOne("TimeSlot")
                        .HasForeignKey("StudioBookingSystem.Common.EntityModel.TimeSlot", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Booking", b =>
                {
                    b.Navigation("TimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Location", b =>
                {
                    b.Navigation("Coordinates")
                        .IsRequired();
                });

            modelBuilder.Entity("StudioBookingSystem.Common.EntityModel.Studio", b =>
                {
                    b.Navigation("Amenities");

                    b.Navigation("Availability")
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("Contact")
                        .IsRequired();

                    b.Navigation("Images");

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
